/**
 * Aaron Schraufnagel. Final project Autumn 2013
 */
package epidemic.progpracticum.view;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 * The <code>SouthPanel</code> class is apart of the SimulationFrame and holds buttons
 * to control the timer.
 * 
 * @author Aaron Schraufnagel
 * @version Autumn 2013
 * 
 * @see java.awt.BorderLayout
 * @see java.awt.Dimension
 * @see java.awt.ActionEvent
 * @see java.awt.ActionListener
 * @see javax.swing.JButton
 * @see javax.swing.Timer
 * 
 * @cust.inv None
 */
@SuppressWarnings("serial")
public class SouthPanel extends JPanel {
    /**
     * Represents the panel's width.
     */
    private final int my_width = 1150;
    /**
     * Represents the panel's height.
     */
    private final int my_height = 45;
    /**
     * Represents the panel containing the buttons.
     */
    private JPanel myButtonPanel;
    /**
     * Represents the button that starts the timer.
     */
    private JButton myStartButton;
    /**
     * Represents the button that stops the timer.
     */
    private JButton myStopButton;
    /**
     * Represents the button that moves the entities by one time slice.
     */
    private JButton myStepButton;
    /**
     * Represents the button that resets the frame.
     */
    private JButton myResetButton;
    /**
     * Represents the listener for all buttons.
     */
    private ButtonListener myButtonListener;
    /**
     * Timer object that controls the SimWorld's start and stop intervals.
     */
    private Timer myTimer;
    /**
     * Represents a world panel containing the graphical representation of SimWorld.
     */
    private WorldPanel myWorldPanel;
    /**
     * The North Panel contains sliders to select the population and a button to generate
     * the world.
     */
    private NorthPanel myNorthPanel;
    /**
     * Represents an east panel that holds statistics.
     */
    private EastPanel myEastPanel;
    
    /**
     * Parameterized constructor for the <code>SouthPanel</code> that constructs the buttons
     * and displays the components.
     * 
     * @param aWorldPanel represents a world panel containing the graphical representation of
     *                    SimWorld
     * @param aNorthPanel contains sliders to select the population and a button to generate
     *                    the world
     * @param anEastPanel panel that holds statistics
     * @param aTimer controls the SimWorld's start and stop intervals
     * 
     * @custom.post the southpanel is constructed
     */
    public SouthPanel(final WorldPanel aWorldPanel, final NorthPanel aNorthPanel,
                      final EastPanel anEastPanel, final Timer aTimer) {
        super();
        setPreferredSize(new Dimension(my_width, my_height));
        
        myWorldPanel = aWorldPanel;
        myNorthPanel = aNorthPanel;
        myEastPanel = anEastPanel;
        myTimer = aTimer;
        
        setupButtons();
    }
    
    /**
     * Sets up the button components.
     * 
     * @custom.post buttons are instantiated and displayed to the user
     */
    public void setupButtons() {
        myButtonListener = new ButtonListener();
        
        myButtonPanel = new JPanel();
        
        myStartButton = new JButton("start");
        myStartButton.addActionListener(myButtonListener);
        
        myStopButton = new JButton("stop");
        myStopButton.addActionListener(myButtonListener);
        
        myStepButton = new JButton("step");
        myStepButton.addActionListener(myButtonListener);
        
        myResetButton = new JButton("reset");
        myResetButton.addActionListener(myButtonListener);
        
        myButtonPanel.add(myStartButton);
        myButtonPanel.add(myStopButton);
        myButtonPanel.add(myStepButton);
        myButtonPanel.add(myResetButton);
        
        add(myButtonPanel, BorderLayout.CENTER);
    }

    /**
     * Assigns actions to each button in the panel.
     * 
     * @custom.post each button is assigned an action
     */
    private class ButtonListener implements ActionListener {
        /**
         * Represents the actions to be fired for each button.
         * 
         * @param anEvent the source of the action
         * @custom.post each button is given an action
         */
        @Override
        public void actionPerformed(ActionEvent anEvent) {
            final Object source = anEvent.getSource();
            
            if (source == myStartButton) {
                if (myWorldPanel.getMyEntityList().size() > 0) {
                    myTimer.start();
                }
            } else if (source == myStopButton) {
                myTimer.stop();
            } else if (source == myStepButton) {
                if (myTimer.isRunning()) {
                    myTimer.stop();
                }
                if (myTimer.getActionListeners().length == 1
                    && myWorldPanel.getMyEntityList().size() > 0) {
                    myTimer.getActionListeners()[0].actionPerformed(new ActionEvent(this,
                                                                    ActionEvent.
                                                                    ACTION_PERFORMED, null));
                }                                
            } else if (source == myResetButton) {
                if (myTimer.isRunning()) {
                    myTimer.stop();
                }
                myWorldPanel.resetWorld();
                myNorthPanel.resetSliders();
                myEastPanel.updateStatistics();
            }
        }   
    }
}
